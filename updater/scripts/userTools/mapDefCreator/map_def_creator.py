#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Thu Jul 10 00:22:54 2008

import math, wx

from gettext import get_text as _
from gettext import close

# begin wxGlade: extracode
# end wxGlade

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sizer_3_copy_staticbox = wx.StaticBox(self, -1, _("MapPos"))
        self.sizer_4_staticbox = wx.StaticBox(self, -1, _("AboutMap"))
        self.sizer_6_staticbox = wx.StaticBox(self, -1, _("AtyscapePos"))
        self.label_1 = wx.StaticText(self, -1, _("Ban"), style=wx.ALIGN_CENTRE)
        self.label_10 = wx.StaticText(self, -1, _("DefName"))
        self.defName = wx.TextCtrl(self, -1, "")
        self.label_6 = wx.StaticText(self, -1, _("WarningYPos"), style=wx.ALIGN_CENTRE)
        self.label_3 = wx.StaticText(self, -1, _("MaxY"))
        self.atysMaxY = wx.TextCtrl(self, -1, "")
        self.label_2 = wx.StaticText(self, -1, _("MinX"))
        self.atysMinX = wx.TextCtrl(self, -1, "")
        self.label_4 = wx.StaticText(self, -1, _("MaxX"))
        self.atysMaxX = wx.TextCtrl(self, -1, "")
        self.label_5 = wx.StaticText(self, -1, _("MinY"))
        self.atysMinY = wx.TextCtrl(self, -1, "")
        self.label_3_copy = wx.StaticText(self, -1, _("MaxY"))
        self.mapMaxY = wx.TextCtrl(self, -1, "")
        self.label_2_copy = wx.StaticText(self, -1, _("MinX"))
        self.mapMinX = wx.TextCtrl(self, -1, "")
        self.label_4_copy = wx.StaticText(self, -1, _("MaxX"))
        self.mapMaxX = wx.TextCtrl(self, -1, "")
        self.label_5_copy = wx.StaticText(self, -1, _("MinY"))
        self.mapMinY = wx.TextCtrl(self, -1, "")
        self.label_7 = wx.StaticText(self, -1, _("MapName"))
        self.mapName = wx.TextCtrl(self, -1, "")
        self.label_8 = wx.StaticText(self, -1, _("MapSize"))
        self.mapSizeW = wx.TextCtrl(self, -1, "")
        self.label_9 = wx.StaticText(self, -1, _("x"))
        self.mapSizeH = wx.TextCtrl(self, -1, "")
        self.generate = wx.Button(self, -1, _("Generate"))
        self.label_11 = wx.StaticText(self, -1, _("SendMe"))
        self.textOut = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.cbGenerate, self.generate)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Title"))
        self.SetSize((800, 400))
        self.SetBackgroundColour(wx.Colour(212, 226, 255))
        self.label_1.SetFont(wx.Font(12, wx.SWISS, wx.SLANT, wx.BOLD, 0, ""))
        self.label_6.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.label_6.SetForegroundColour(wx.Colour(255, 0, 0))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        sizer_3_copy = wx.StaticBoxSizer(self.sizer_3_copy_staticbox, wx.HORIZONTAL)
        grid_sizer_1_copy = wx.FlexGridSizer(3, 6, 0, 0)
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(3, 6, 0, 0)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_1, 0, wx.ALL|wx.EXPAND, 3)
        sizer_5.Add(self.label_10, 0, 0, 0)
        sizer_5.Add(self.defName, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_5, 0, wx.TOP|wx.EXPAND, 5)
        sizer_6.Add(self.label_6, 0, wx.BOTTOM|wx.EXPAND, 3)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.label_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.atysMaxY, 1, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.label_2, 0, 0, 0)
        grid_sizer_1.Add(self.atysMinX, 0, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.label_4, 0, 0, 0)
        grid_sizer_1.Add(self.atysMaxX, 0, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.label_5, 0, 0, 0)
        grid_sizer_1.Add(self.atysMinY, 0, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.AddGrowableCol(1)
        grid_sizer_1.AddGrowableCol(3)
        grid_sizer_1.AddGrowableCol(5)
        sizer_6.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_6, 0, wx.EXPAND, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add(self.label_3_copy, 1, wx.EXPAND, 0)
        grid_sizer_1_copy.Add(self.mapMaxY, 1, wx.EXPAND, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add(self.label_2_copy, 0, 0, 0)
        grid_sizer_1_copy.Add(self.mapMinX, 0, wx.EXPAND, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add(self.label_4_copy, 0, 0, 0)
        grid_sizer_1_copy.Add(self.mapMaxX, 0, wx.EXPAND, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add(self.label_5_copy, 0, 0, 0)
        grid_sizer_1_copy.Add(self.mapMinY, 0, wx.EXPAND, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.Add((20, 20), 0, 0, 0)
        grid_sizer_1_copy.AddGrowableCol(1)
        grid_sizer_1_copy.AddGrowableCol(3)
        grid_sizer_1_copy.AddGrowableCol(5)
        sizer_3_copy.Add(grid_sizer_1_copy, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3_copy, 0, wx.EXPAND, 0)
        sizer_4.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.mapName, 1, wx.EXPAND, 0)
        sizer_4.Add(self.label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.mapSizeW, 0, 0, 0)
        sizer_4.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.mapSizeH, 0, 0, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_2.Add(self.generate, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(self.label_11, 0, 0, 0)
        sizer_2.Add(self.textOut, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def cbGenerate(self, event): # wxGlade: MyFrame.<event_handler>
        defName = self.defName.GetValue()
        
        AminX = float(self.atysMinX.GetValue())
        AmaxX = float(self.atysMaxX.GetValue())
        AminY = float(self.atysMinY.GetValue())
        AmaxY = float(self.atysMaxY.GetValue())
        
        MminX = float(self.mapMinX.GetValue())
        MmaxX = float(self.mapMaxX.GetValue())
        MminY = float(self.mapMinY.GetValue())
        MmaxY = float(self.mapMaxY.GetValue())
        
        
        mapName = self.mapName.GetValue()
        MSizeW = int(self.mapSizeW.GetValue())
        MSizeH = int(self.mapSizeH.GetValue())
        
        ratioX = (MmaxX - MminX) / (AmaxX - AminX)
        ratioY = (MmaxY - MminY) / (AmaxY - AminY)
        offsetX = (AmaxX * ratioX) - MmaxX
        offsetY = (AmaxY * ratioY) - MmaxY
        
        minX = offsetX / ratioX
        maxX = (offsetX + MSizeW) / ratioX
        minY = offsetY / ratioY
        maxY = (offsetY + MSizeH) / ratioY
        
        TSizeW = int(pow(2, math.ceil(math.log(MSizeW) / math.log(2))))
        TSizeH = int(pow(2, math.ceil(math.log(MSizeH) / math.log(2))))
        
        final = defName+" "+str(minX)+" "+str(maxX)+" "+str(-maxY)+" "+str(-minY)+" "+str(ratioX)+" "+str(ratioY)+" "+str(offsetX)+" "+str(offsetY)+" "+mapName+" "+str(TSizeW)+" "+str(TSizeH)+" 1"
        self.textOut.SetValue(final)
        

# end of class MyFrame

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
    close()
