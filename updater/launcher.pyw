#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Mar 04 15:13:48 2008

import os, sys
import wx
import http_client
import shutil
import zipfile
import hashlib
import random

# begin wxGlade: extracode
# end wxGlade

bans = ["first", "neutre", "fyros", "tryker", "matis", "zorai"]

class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_4 = wx.StaticText(self, -1, "ATYSCAPE", style=wx.ALIGN_CENTRE)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "Version : 0.7\n\nLicense : GPL\n\nWeb : http://atyscape.diwi.org/trac/wiki/WikiStart\n\nMail : ulukyn@gmail.com\n\n", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_CENTRE)
        self.button_4 = wx.Button(self, -1, "Close")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.ExitAbout, self.button_4)
        # end wxGlade
        
    def setVersion(self, version):
        text =  "Version : "+version+"\n\nLicense : GPL\n\nWeb : http://atyscape.diwi.org/trac/wiki/WikiStart\n\nMail : ulukyn@gmail.com\n\n"
        self.text_ctrl_1.SetValue(text)

    def __set_properties(self):
        # begin wxGlade: MyFrame1.__set_properties
        self.SetTitle("frame_2")
        self.SetSize((400, 200))
        self.SetBackgroundColour(wx.Colour(221, 221, 221))
        self.label_4.SetFont(wx.Font(18, wx.ROMAN, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame1.__do_layout
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_16.Add(self.label_4, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_16.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
        sizer_16.Add(self.button_4, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_16)
        self.Layout()
        # end wxGlade

    def ExitAbout(self, event): # wxGlade: MyFrame1.<event_handler>
        self.Close(True)

# end of class MyFrame1


class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.bitmap_2 = wx.StaticBitmap(self, -1, wx.Bitmap("imgs/screen.jpg", wx.BITMAP_TYPE_ANY), style=wx.SIMPLE_BORDER)
        self.label_1 = wx.StaticText(self, -1, "\nConfiguration\n\n1) Please click on Select button\n\n2) Please go to path where Ryzom is installed and select client_ryzom_rd.exe\n\nNow you can play :)  ", style=wx.ALIGN_CENTRE)
        self.button_5 = wx.Button(self, -1, "OK")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.quit, self.button_5)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle("Atyscape")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_14.Add(self.bitmap_2, 0, wx.ALL, 2)
        sizer_14.Add(self.label_1, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_14.Add(self.button_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_14)
        sizer_14.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def quit(self, event): # wxGlade: MyDialog.<event_handler>
        self.Close(True)

# end of class MyDialog


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FULL_REPAINT_ON_RESIZE|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_5 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), "Quitter", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), "Help", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.NewId(), "About", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "?")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.bitmap_1 = wx.StaticBitmap(self, -1, wx.Bitmap("imgs/ban_neutre.jpg", wx.BITMAP_TYPE_ANY))
        self.label_2 = wx.StaticText(self.notebook_1_pane_1, -1, "Current Version")
        self.currentVersionLabel = wx.StaticText(self.notebook_1_pane_1, -1, "v0.0.0")
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, -1, "Available version")
        self.avaVersionLabel = wx.StaticText(self.notebook_1_pane_1, -1, "v0.0.0")
        self.text_ctrl_2 = wx.TextCtrl(self.notebook_1_pane_1, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_RICH2|wx.TE_AUTO_URL)
        self.bitmap_3 = wx.StaticBitmap(self.notebook_1_pane_1, -1, wx.Bitmap("imgs/preview.jpg", wx.BITMAP_TYPE_ANY))
        self.label_6 = wx.StaticText(self.notebook_1_pane_1, -1, u"Chemin des données de Ryry")
        self.ryzom_data_path = wx.TextCtrl(self.notebook_1_pane_1, -1, "")
        self.button_1 = wx.Button(self.notebook_1_pane_1, -1, u"Définir")
        self.downloadStatus = wx.Gauge(self.notebook_1_pane_1, -1, 100, style=wx.GA_HORIZONTAL|wx.GA_SMOOTH)
        self.bitmap_button_1 = wx.BitmapButton(self.notebook_1_pane_1, -1, wx.Bitmap("imgs/patcher.jpg", wx.BITMAP_TYPE_ANY))
        self.userToolsList = wx.ListBox(self.notebook_1_pane_3, -1, choices=[])
        self.label_5 = wx.StaticText(self.notebook_1_pane_3, -1, "Description : ")
        self.userToolDescr = wx.TextCtrl(self.notebook_1_pane_3, -1, "", style=wx.TE_MULTILINE)
        self.button_6 = wx.Button(self.notebook_1_pane_3, -1, "Lancer")
        self.gameMode = wx.RadioBox(self.notebook_1_pane_4, -1, "Game mode", choices=["Marche (Mode de jeu classique)", "Vol libre (Mode exploration)"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.label_7_copy = wx.StaticText(self.notebook_1_pane_5, -1, "Resolution")
        self.resolution = wx.ComboBox(self.notebook_1_pane_5, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.getGModes = wx.Button(self.notebook_1_pane_5, -1, "Obtenir les Modes possibles")
        self.fs_check = wx.CheckBox(self.notebook_1_pane_5, -1, "Plein Ecran")
        self.rendu3D = wx.RadioBox(self.notebook_1_pane_5, -1, "Rendu 3D", choices=["DirectX 9.0c", "OpenGL"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.button_2 = wx.Button(self, -1, "EXIT")
        self.button_3 = wx.Button(self, -1, "PLAY")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.CbExit, id=-1)
        self.Bind(wx.EVT_BUTTON, self.run_fileselector, self.button_1)
        self.Bind(wx.EVT_LISTBOX, self.cbUTSelect, self.userToolsList)
        self.Bind(wx.EVT_BUTTON, self.cbLaunchUserTools, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.cbGetModes, self.getGModes)
        self.Bind(wx.EVT_BUTTON, self.exit, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.play, self.button_3)
        # end wxGlade
        
        randban = random.randint(0, len(bans)-1)
        self.bitmap_1.SetBitmap(wx.Bitmap("imgs/ban_"+bans[randban]+".jpg"))
        
        self.fileselector = wx.FileDialog(self, "Select Ryzom Client", "", "", "client_ryzom_rd.exe", wx.OPEN)
        self.updateId = None
        
        f = open("atyscape_user.cfg")
        fr = f.read().split("\n")
        f.close()
        
        self.config = {}
        for line in fr:
            if line:
                sline = line.split(" : ")
                self.config[sline[0]] = sline[1]
        self.getPackagesVersions()
        
        if os.path.isfile("../graphic_modes.nfo"):
            f = open("../graphic_modes.nfo")
            fr = f.read().split("\n")
            f.close()
            fr.sort()
            for line in fr:
                if line:
                    self.resolution.Append(line)
        if self.config["screenResolution"] == "?":
            self.cbGetModes(None)
        else:
            self.resolution.SetValue(self.config["screenResolution"])
            
        self.ryzom_data_path.SetLabel(self.config["datapath"])
        if self.config["gameMode"] == "walk":
            self.gameMode.SetSelection(0)
        else:
            self.gameMode.SetSelection(1)
        
        if self.config["driver3D"] == "DirectX":
            self.rendu3D.SetSelection(0)
        else:
            self.rendu3D.SetSelection(1)        
        
        if self.config["fullscreen"] == "yes" :
            self.fs_check.SetValue(1)
        else:
            self.fs_check.SetValue(0)
        
        f = open("userTools/list.txt")
        userTools = f.read().split("\n")
        f.close()
        
        self.uTools = {}
        for tool in userTools:
            if os.path.isfile("userTools/"+tool+".txt"):
                f = open("userTools/"+tool+".txt")
                fr = f.read().split("\n")
                f.close()
                self.uTools[tool] = ("\n".join(fr), tool+".exe")
                self.userToolsList.Append(tool)	
            

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("AtyScape - Update System (v0.7)")
        self.SetSize((701, 568))
        self.SetBackgroundColour(wx.Colour(207, 216, 214))
        self.currentVersionLabel.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.avaVersionLabel.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.text_ctrl_2.SetMinSize((100, 34))
        self.label_6.SetMinSize((100, -1))
        self.bitmap_button_1.SetBackgroundColour(wx.Colour(61, 70, 49))
        self.bitmap_button_1.SetForegroundColour(wx.Colour(61, 70, 49))
        self.bitmap_button_1.SetSize(self.bitmap_button_1.GetBestSize())
        self.gameMode.SetSelection(0)
        self.label_7_copy.SetMinSize((100, -1))
        self.rendu3D.SetSelection(0)
        self.button_2.SetForegroundColour(wx.Colour(255, 0, 0))
        self.button_3.SetBackgroundColour(wx.Colour(50, 153, 204))
        self.button_3.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        # end wxGlade
        self.SetMinSize((795, 560))

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_17_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_9_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(3, 2, 6, 0)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10.Add(self.bitmap_1, 0, wx.ALL, 5)
        sizer_2.Add(sizer_10, 0, wx.ALIGN_CENTER_HORIZONTAL, 4)
        grid_sizer_1.Add(self.label_2, 0, 0, 0)
        grid_sizer_1.Add(self.currentVersionLabel, 0, 0, 0)
        grid_sizer_1.Add(self.label_3, 0, 0, 0)
        grid_sizer_1.Add(self.avaVersionLabel, 0, 0, 0)
        sizer_7.Add(grid_sizer_1, 0, wx.EXPAND, 0)
        sizer_6.Add(self.text_ctrl_2, 1, wx.EXPAND, 0)
        sizer_6.Add(self.bitmap_3, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_7.Add(self.label_6, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 3)
        sizer_8.Add(self.ryzom_data_path, 1, wx.EXPAND, 0)
        sizer_8.Add(self.button_1, 0, 0, 0)
        sizer_7.Add(sizer_8, 0, wx.ALL|wx.EXPAND, 3)
        sizer_5.Add(self.downloadStatus, 1, wx.EXPAND, 0)
        sizer_5.Add(self.bitmap_button_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_7.Add(sizer_5, 0, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_7)
        sizer_9.Add(self.userToolsList, 1, wx.EXPAND, 0)
        sizer_12.Add(self.label_5, 0, wx.ALL, 3)
        sizer_12.Add(self.userToolDescr, 1, wx.EXPAND, 0)
        sizer_12.Add(self.button_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_9.Add(sizer_12, 1, wx.EXPAND, 0)
        self.notebook_1_pane_3.SetSizer(sizer_9)
        sizer_15.Add(self.gameMode, 0, wx.EXPAND, 0)
        self.notebook_1_pane_4.SetSizer(sizer_15)
        sizer_9_copy.Add(self.label_7_copy, 0, wx.LEFT|wx.RIGHT, 3)
        sizer_9_copy.Add(self.resolution, 1, 0, 0)
        sizer_9_copy.Add(self.getGModes, 0, 0, 0)
        sizer_17_copy.Add(sizer_9_copy, 0, wx.ALL|wx.EXPAND, 6)
        sizer_17_copy.Add(self.fs_check, 0, wx.ALL, 6)
        sizer_17_copy.Add(self.rendu3D, 0, wx.ALL|wx.EXPAND, 6)
        self.notebook_1_pane_5.SetSizer(sizer_17_copy)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "General")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "User Tools")
        self.notebook_1.AddPage(self.notebook_1_pane_4, "Mode de jeu")
        self.notebook_1.AddPage(self.notebook_1_pane_5, "Options graphiques")
        sizer_13.Add(self.notebook_1, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_4_copy.Add(self.button_2, 0, 0, 0)
        sizer_4_copy.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_4_copy.Add(self.button_3, 0, wx.EXPAND, 0)
        sizer_4.Add(sizer_4_copy, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def update(self, event): # wxGlade: MyFrame.<event_handler>
        print self.versions
        if self.versions[1][1]:
            file_to_download = self.versions[1][1]
#		else:
#		file_to_download = "atyscape.diwi.org/trac/attachment/wiki/UpdateSection/atyscape_win.zip"
        
        self.text_ctrl_2.AppendText("Updating v"+".".join(self.versions[3]) +" to v"+".".join(self.versions[2])+"\n")
        self.text_ctrl_2.AppendText("Downloading Update...")
        http_client.download(file_to_download, "../unpack/atyscape.zip", self.downStatus)
        self.text_ctrl_2.AppendText("OK\n\n")
        self.text_ctrl_2.AppendText("Unpacking Update...\n")
        unpack_status = self.unpack_update()
        if (unpack_status):
            self.config["currentVersion"] = self.versions[1][0]
            #~ self.text_ctrl_2.AppendText("OK\n")
            #~ copytree("../unpack/atyscape", "../")
        #~ else:
            #~ self.text_ctrl_2.AppendText("KO\n")
        self.saveUserConfig()
        self.getPackagesVersions()
        os.execl("atyscape.exe", "")

    def exit(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close(True)
        sys.exit()

    def saveConfig(self, classicMode = 1):
        datapath = self.ryzom_data_path.GetLabel()
        resolution = self.resolution.GetValue()
        if classicMode :
            if self.gameMode.GetSelection() == 0:
                self.config["gameMode"] = "walk"
            else:
                self.config["gameMode"] = "fly"
            
        self.config["screenResolution"] = resolution
        self.config["datapath"] = datapath
        if self.rendu3D.GetSelection() == 0:
            self.config["driver3D"] = "DirectX"
        else:
            self.config["driver3D"] = "OpenGL"
            
        if self.fs_check.GetValue():
            self.config["fullscreen"] = "yes"
        else:
            self.config["fullscreen"] = "no"
            
        self.saveUserConfig()
        if classicMode and not os.path.isfile("/".join(self.config["datapath"].split("\\")[:-1])+"/client_ryzom_rd.exe"):
            alert_datapath = MyDialog(None, -1, "")
            alert_datapath.Show()
            return 0
        f = open("atyscape.cf_")
        fr = f.read()
        f.close()
        if len(resolution.split(" ")) < 3:
            resolution = "1024x768 32Bit @75"
        sres = resolution.split(" ")
        screenH, screenV = sres[0].split("x")
        depth = sres[1].split("Bit")[0]
        freq = sres[2][1:]
        fr = fr.replace("%%ScreenH%%", screenH)
        fr = fr.replace("%%ScreenV%%", screenV)
        fr = fr.replace("%%Depth%%", depth)
        fr = fr.replace("%%Freq%%", freq)
        fr = fr.replace("%%FullScreen%%", self.config["fullscreen"])
        fr = fr.replace("%%Driver3D%%", self.config["driver3D"].encode("latin1", "replace"))
        fr = fr.replace("%%RyzomDataPath%%",  self.config["datapath"].encode("latin1", "replace"))
        fr = fr.replace("%%GameMode%%",  self.config["gameMode"].encode("latin1", "replace"))
        f = open("../atyscape.cfg", "w")
        fr = f.write(fr)
        f.close()
        return 1

    def play(self, event): # wxGlade: MyFrame.<event_handler>
        if self.saveConfig():
            os.chdir("..")
            self.Iconize()
            os.execl("atyscape_rd.exe", "")

    def getPackagesVersions(self):
        self.versions = http_client.getUpdates()
        avaVersion = self.versions[0].split(".")
        curVersion = self.config["currentVersion"].split(".")
        self.versions.append(avaVersion)
        self.versions.append(curVersion)
        needUpdate = 0
        if int(avaVersion[0]) > int(curVersion[0]):
            needUpdate = 1
        elif int(avaVersion[0]) == int(curVersion[0]):
            if int(avaVersion[1]) > int(curVersion[1]):
                needUpdate = 1
            elif int(avaVersion[1]) == int(curVersion[1]):
                if int(avaVersion[2]) > int(curVersion[2]):
                    needUpdate = 1
        if needUpdate:
            self.bitmap_button_1.SetBitmapLabel(wx.Bitmap("imgs/patcher.jpg", wx.BITMAP_TYPE_ANY))
            self.Bind(wx.EVT_BUTTON, self.update, self.bitmap_button_1, 1)
        else:
            self.bitmap_button_1.SetBitmapLabel(wx.Bitmap("imgs/patcher_off.jpg", wx.BITMAP_TYPE_ANY))
            self.Unbind(wx.EVT_BUTTON, self.bitmap_button_1, 1)
            
                             
        self.avaVersionLabel.SetLabel("v"+self.versions[0])
        self.currentVersionLabel.SetLabel("v"+self.config["currentVersion"])
        self.bitmap_3.SetBitmap(wx.Bitmap("imgs/preview.jpg", wx.BITMAP_TYPE_ANY))
        f = open("infos.txt")
        fr = f.read()
        f.close()
        self.text_ctrl_2.SetValue(fr)

    def downStatus(self, blocks, blockSize, size):
        self.downloadStatus.SetValue((100*blocks*blockSize)/size)
        
    def saveUserConfig(self):
        buff = ""
        for (name, value) in self.config.items():
            print (name, value)
            buff += name+" : "+value+"\n"
        f = open("atyscape_user.cfg", "w")
        f.write(buff)
        f.close()

    def run_fileselector(self, event): # wxGlade: MyFrame.<event_handler>
        self.fileselector.ShowModal()
        if os.path.basename(self.fileselector.GetPath()) == "client_ryzom_rd.exe":
            self.ryzom_data_path.SetLabel(os.path.dirname(self.fileselector.GetPath())+os.sep+"data")

    def unzip_file_into_dir(self, file, dir):
        if not os.path.isdir(dir):
            os.mkdir(dir, 0777)
        zfobj = zipfile.ZipFile(file, "r", zipfile.ZIP_DEFLATED)
        if(zfobj.testzip()):
            self.text_ctrl_2.SetDefaultStyle(wx.TextAttr(wx.RED))
            self.text_ctrl_2.AppendText("Package Error : Zip Corrupted\n")
            self.text_ctrl_2.SetDefaultStyle(wx.TextAttr(wx.BLACK))
            return
        control = zfobj.read("control.sha")
        controls = {}
        for line in control.split("\n")[2:]:
            if line:
                sline = line.split("\t")
            print sline
            controls[sline[1][:-1]] = sline[0]

        size = len(zfobj.namelist())
        i = 0
        ret = 1
        for name in zfobj.namelist():
            self.downloadStatus.SetValue((100*i)/size)
            i += 1
            error = ""
            if name.endswith('/'):
                os.mkdir(os.path.join(dir, name))
            else:
                if not os.path.isdir(os.path.join(dir, os.path.dirname(name))):
                    os.makedirs(os.path.join(dir, os.path.dirname(name)))
                contents = zfobj.read(name)
                if (name == "control.sha"):
                    continue
                if (hashlib.sha224(contents).hexdigest() != controls[name]):
                    error = "Check Failed"
                    ret = 0
                self.text_ctrl_2.Update()
                try:
                    outfile = open(os.path.join(dir, name), 'wb')
                    outfile.write(zfobj.read(name))
                    outfile.close()
                except (IOError, os.error), why:
                    ret = 0
                    error = "Can't write file : "+str(why)

            if (error):
                self.text_ctrl_2.SetDefaultStyle(wx.TextAttr(wx.RED))
                self.text_ctrl_2.AppendText("KO !!! : "+name+" !!! \n("+error+")\n")
            else:
                self.text_ctrl_2.SetDefaultStyle(wx.TextAttr((0, 100, 0, 255)))	
                self.text_ctrl_2.AppendText("OK : " +name+"\n")

        return ret
            
    def unpack_update(self):
        ret = 0
        if os.path.isfile("../unpack/atyscape.zip"):
            ret = self.unzip_file_into_dir("../unpack/atyscape.zip", "../")
        return ret

    def copytree(src, dst=""):
        names = os.listdir(src)
        if dst and not os.path.isdir(dst):
            os.mkdir(dst)
        for name in names:
            srcname = os.path.join(src, name)
            dstname = os.path.join(dst, name)
            try:
                if os.path.isdir(srcname):
                    copytree(srcname, dstname)
                else:
                    shutil.copy2(srcname, dstname)
            except (IOError, os.error), why:
                print "Can't copy %s to %s: %s" % (`srcname`, `dstname`, str(why))

    def CbAboutEvent(self, event): # wxGlade: MyFrame.<event_handler>
        frame = MyFrame1(None, -1, "")
        frame.setVersion(self.config["currentVersion"])
        frame.Show()
        
    def CbExit(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close(True)
        sys.exit()

    def cbLaunchUserTools(self, event): # wxGlade: MyFrame.<event_handler>
        os.system(self.selectedUTCommand)

    def cbUTSelect(self, event): # wxGlade: MyFrame.<event_handler>
         ut = self.userToolsList.GetStringSelection()
         self.selectedUT = ut
         self.selectedUTCommand = self.uTools[ut][1]
         self.userToolDescr.SetValue(self.uTools[ut][0])
        
    def cbGetModes(self, event): # wxGlade: MyFrame.<event_handler>

        self.config["gameMode"] = "GetGraphicModes"
        #self.saveConfig(0)
        os.chdir("..")
        os.system("atyscape_rd.exe")
        os.chdir("updater")
        self.screenRes = []
        if os.path.isfile("../graphic_modes.nfo"):
            f = open("../graphic_modes.nfo")
            fr = f.read().split("\n")
            f.close()
            fr.sort()
            self.resolution.Clear()
            for line in fr:
                if line:
                    self.resolution.Append(line)
                    self.screenRes.append(line)
            self.screenRes.sort()
            self.resolution.SetValue(self.screenRes[0])

        

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
